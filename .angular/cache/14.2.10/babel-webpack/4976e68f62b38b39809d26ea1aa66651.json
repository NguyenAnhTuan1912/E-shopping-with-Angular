{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport ProductCategories from '../../data/product-categories.json';\nimport replaceSpecialCharToSpace from '../../utils/replaceSpecialCharToSpace';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common\";\nconst _c0 = [\"searchSelect\"];\nconst _c1 = [\"searchInput\"];\n\nfunction SearchBarComponent_select_4_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"option\", 10);\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"titlecase\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const searchOption_r4 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"value\", searchOption_r4.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(3, 2, searchOption_r4.name), \" \");\n  }\n}\n\nfunction SearchBarComponent_select_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"select\", 6, 7)(2, \"option\", 8);\n    i0.ɵɵtext(3);\n    i0.ɵɵpipe(4, \"titlecase\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, SearchBarComponent_select_4_ng_container_5_Template, 4, 4, \"ng-container\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(4, 2, ctx_r0.keyOption));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.searchOptions);\n  }\n}\n\nexport class SearchBarComponent {\n  router;\n  placeHolder = '';\n  hasOption = false;\n  keyOption = '';\n  searchConfig = {\n    searchContent: '',\n    searchBy: '',\n    clearAferSearch: false\n  };\n  selectElemenntRef;\n  inputElementRef;\n  resultUrl = '/search';\n  searchOptions = [];\n\n  constructor(router) {\n    this.router = router;\n  }\n\n  ngOnInit() {\n    if (this.searchConfig.searchContent.toLowerCase() === 'products') {\n      const categories = ProductCategories;\n      this.searchOptions = categories.map(category => ({\n        name: replaceSpecialCharToSpace(category, '-'),\n        value: category\n      }));\n    }\n  }\n\n  ngAfterViewInit() {}\n\n  ngOnDestroy() {}\n\n  onSearchInputEnter(event) {\n    if (event.key === 'Enter') {\n      const searchBy = this.searchConfig.searchBy;\n      const inputElement = this.inputElementRef.nativeElement;\n      const selectElement = this.selectElemenntRef.nativeElement;\n      const searchString = inputElement.value;\n      const searchOption = selectElement.value;\n      const keyOption = this.keyOption;\n      if (searchString === '' && searchOption === '') return;\n      this.search(searchString, searchOption, searchBy, keyOption);\n      this.checkSearchConfigToClearSearch();\n    }\n  }\n\n  search(searchString, searchOption, searchBy, keyOption) {\n    if (searchString !== '' && searchOption === '') {\n      this.router.navigate([this.resultUrl], {\n        queryParams: {\n          [searchBy]: searchString\n        }\n      });\n    } else if (searchString === '' && searchOption !== '') {\n      this.router.navigate([this.resultUrl], {\n        queryParams: {\n          [keyOption]: searchOption\n        }\n      });\n    } else {\n      this.router.navigate([this.resultUrl], {\n        queryParams: {\n          [searchBy]: searchString,\n          [keyOption]: searchOption\n        }\n      });\n    }\n  }\n\n  checkSearchConfigToClearSearch() {\n    if (this.searchConfig.clearAferSearch) {\n      this.inputElementRef.nativeElement.value = '';\n      this.selectElemenntRef.nativeElement.value = '';\n    }\n  }\n\n  static ɵfac = function SearchBarComponent_Factory(t) {\n    return new (t || SearchBarComponent)(i0.ɵɵdirectiveInject(i1.Router));\n  };\n  static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SearchBarComponent,\n    selectors: [[\"app-searchbar\"]],\n    viewQuery: function SearchBarComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.selectElemenntRef = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputElementRef = _t.first);\n      }\n    },\n    inputs: {\n      placeHolder: \"placeHolder\",\n      hasOption: \"hasOption\",\n      keyOption: \"keyOption\",\n      searchConfig: \"searchConfig\"\n    },\n    decls: 7,\n    vars: 2,\n    consts: [[1, \"search-bar\"], [1, \"app-label\"], [1, \"material-symbols-outlined\"], [\"class\", \"app-select border-right\", 4, \"ngIf\"], [\"type\", \"text\", \"name\", \"search\", \"autocomplete\", \"off\", 1, \"app-label-input\", 3, \"placeholder\", \"keydown\"], [\"searchInput\", \"\"], [1, \"app-select\", \"border-right\"], [\"searchSelect\", \"\"], [\"value\", \"\", \"selected\", \"\"], [4, \"ngFor\", \"ngForOf\"], [3, \"value\"]],\n    template: function SearchBarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"label\", 1)(2, \"span\", 2);\n        i0.ɵɵtext(3, \"search\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(4, SearchBarComponent_select_4_Template, 6, 4, \"select\", 3);\n        i0.ɵɵelementStart(5, \"input\", 4, 5);\n        i0.ɵɵlistener(\"keydown\", function SearchBarComponent_Template_input_keydown_5_listener($event) {\n          return ctx.onSearchInputEnter($event);\n        });\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.hasOption);\n        i0.ɵɵadvance(1);\n        i0.ɵɵpropertyInterpolate(\"placeholder\", ctx.placeHolder);\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf, i2.TitleCasePipe]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}